#include "cpu.hpp"

void CPU::exec(u8 op) {
    // immediate bytes
    u8 D8 = mmu->read8(PC + 1);
    s8 R8 = (s8)D8;
    u16 D16 = mmu->read16(PC + 1);

    // register pair values and special memory addresses
    u16 BC = Utils::getPair(B, C);
    u16 DE = Utils::getPair(D, E);
    u16 HL = Utils::getPair(H, L);
    u16 CIO = 0xFF00 + C;
    u16 LDH = 0xFF00 + A;

    // references to memory values at given addresses
    u8 &atBC = mmu->getRef(BC);    
    u8 &atDE = mmu->getRef(DE);
    u8 &atHL = mmu->getRef(HL);
    u8 &atD16 = mmu->getRef(D16);
    u8 &atCIO = mmu->getRef(CIO);
    u8 &atLDH = mmu->getRef(LDH);

    switch (op) {

        case 0x00: NOP(); break;
        case 0x01: LDrr(B, C, D16); break;
        case 0x02: LD(atBC, A); break;
        case 0x03: INCrr(B, C); break;
        case 0x04: INC(B); break;
        case 0x05: DEC(B); break;
        case 0x06: LD(B, D8); break;
        case 0x07: RLa(true); break;
        case 0x08: LDaddrsp(D16); break;
        case 0x09: ADDhl(BC); break;
        case 0x0A: LD(A, atBC); break;
        case 0x0B: DECrr(B, C); break;
        case 0x0C: INC(C); break;
        case 0x0D: DEC(C); break;
        case 0x0E: LD(C, D8); break;
        case 0x0F: RRa(true); break;

        case 0x10: STOP(); break;
        case 0x11: LDrr(D, E, D16); break;
        case 0x12: LD(atDE, A); break;
        case 0x13: INCrr(D, E); break;
        case 0x14: INC(D); break;
        case 0x15: DEC(D); break;
        case 0x16: LD(D, D8); break;
        case 0x17: RLa(false); break;
        case 0x18: JR(R8); break;
        case 0x19: ADDhl(DE); break;
        case 0x1A: LD(A, atDE); break;
        case 0x1B: DECrr(D, E); break;
        case 0x1C: INC(E); break;
        case 0x1D: DEC(E); break;
        case 0x1E: LD(E, D8); break;
        case 0x1F: RRa(false); break;

        case 0x20: JRcond(R8, flagZ); break;
        case 0x21: LDrr(H, L, D16); break;
        case 0x22: LDI(atHL, A); break;
        case 0x23: INCrr(H, L); break;
        case 0x24: INC(H); break;
        case 0x25: DEC(H); break;
        case 0x26: LD(H, D8); break;
        case 0x27: DAA(); break;
        case 0x28: JRcond(R8, flagZ); break;
        case 0x29: ADDhl(HL); break;
        case 0x2A: LDI(A, atHL); break;
        case 0x2B: DECrr(H, L); break;
        case 0x2C: INC(L); break;
        case 0x2D: DEC(L); break;
        case 0x2E: LD(L, D8); break;
        case 0x2F: CPL(); break;

        case 0x30: JRcond(R8, !flagC); break;
        case 0x31: LDsp(D16); break;
        case 0x32: LDD(atHL, A); break;
        case 0x33: INCsp(); break;
        case 0x34: INC(atHL); break;
        case 0x35: DEC(atHL); break;
        case 0x36: LD(atHL, D8); break;
        case 0x37: SCF(); break;
        case 0x38: JRcond(R8, flagC); break;
        case 0x39: ADDhl(SP); break;
        case 0x3A: LDD(A, atHL); break;
        case 0x3B: DECsp(); break;
        case 0x3C: INC(A); break;
        case 0x3D: DEC(A); break;
        case 0x3E: LD(A, D8); break;
        case 0x3F: CCF(); break;

        case 0x40: LD(B, B); break;
        case 0x41: LD(B, C); break;
        case 0x42: LD(B, D); break;
        case 0x43: LD(B, E); break;
        case 0x44: LD(B, H); break;
        case 0x45: LD(B, L); break;
        case 0x46: LD(B, atHL); break;
        case 0x47: LD(B, A); break;
        case 0x48: LD(C, B); break;
        case 0x49: LD(C, C); break;
        case 0x4A: LD(C, D); break;
        case 0x4B: LD(C, E); break;
        case 0x4C: LD(C, H); break;
        case 0x4D: LD(C, L); break;
        case 0x4E: LD(C, atHL); break;
        case 0x4F: LD(C, A); break;

        case 0x50: LD(D, B); break;
        case 0x51: LD(D, C); break;
        case 0x52: LD(D, D); break;
        case 0x53: LD(D, E); break;
        case 0x54: LD(D, H); break;
        case 0x55: LD(D, L); break;
        case 0x56: LD(D, atHL); break;
        case 0x57: LD(D, A); break;
        case 0x58: LD(E, B); break;
        case 0x59: LD(E, C); break;
        case 0x5A: LD(E, D); break;
        case 0x5B: LD(E, E); break;
        case 0x5C: LD(E, H); break;
        case 0x5D: LD(E, L); break;
        case 0x5E: LD(E, atHL); break;
        case 0x5F: LD(E, A); break;

        case 0x60: LD(H, B); break;
        case 0x61: LD(H, C); break;
        case 0x62: LD(H, D); break;
        case 0x63: LD(H, E); break;
        case 0x64: LD(H, H); break;
        case 0x65: LD(H, L); break;
        case 0x66: LD(H, atHL); break;
        case 0x67: LD(H, A); break;
        case 0x68: LD(L, B); break;
        case 0x69: LD(L, C); break;
        case 0x6A: LD(L, D); break;
        case 0x6B: LD(L, E); break;
        case 0x6C: LD(L, H); break;
        case 0x6D: LD(L, L); break;
        case 0x6E: LD(L, atHL); break;
        case 0x6F: LD(L, A); break;

        case 0x70: LD(atHL, B); break;
        case 0x71: LD(atHL, C); break;
        case 0x72: LD(atHL, D); break;
        case 0x73: LD(atHL, E); break;
        case 0x74: LD(atHL, H); break;
        case 0x75: LD(atHL, L); break;
        case 0x76: HALT(); break;
        case 0x77: LD(atHL, A); break;
        case 0x78: LD(A, B); break;
        case 0x79: LD(A, C); break;
        case 0x7A: LD(A, D); break;
        case 0x7B: LD(A, E); break;
        case 0x7C: LD(A, H); break;
        case 0x7D: LD(A, L); break;
        case 0x7E: LD(A, atHL); break;
        case 0x7F: LD(A, A); break;

        case 0x80: ADD(B); break;
        case 0x81: ADD(C); break;
        case 0x82: ADD(D); break;
        case 0x83: ADD(E); break;
        case 0x84: ADD(H); break;
        case 0x85: ADD(L); break;
        case 0x86: ADD(atHL); break;
        case 0x87: ADD(A); break;
        case 0x88: ADC(B); break;
        case 0x89: ADC(C); break;
        case 0x8A: ADC(D); break;
        case 0x8B: ADC(E); break;
        case 0x8C: ADC(H); break;
        case 0x8D: ADC(L); break;
        case 0x8E: ADC(atHL); break;
        case 0x8F: ADC(A); break;

        case 0x90: SUB(B); break;
        case 0x91: SUB(C); break;
        case 0x92: SUB(D); break;
        case 0x93: SUB(E); break;
        case 0x94: SUB(H); break;
        case 0x95: SUB(L); break;
        case 0x96: SUB(atHL); break;
        case 0x97: SUB(A); break;
        case 0x98: SBC(B); break;
        case 0x99: SBC(C); break;
        case 0x9A: SBC(D); break;
        case 0x9B: SBC(E); break;
        case 0x9C: SBC(H); break;
        case 0x9D: SBC(L); break;
        case 0x9E: SBC(atHL); break;
        case 0x9F: SBC(A); break;

        case 0xA0: AND(B); break;
        case 0xA1: AND(C); break;
        case 0xA2: AND(D); break; 
        case 0xA3: AND(E); break;
        case 0xA4: AND(H); break;
        case 0xA5: AND(L); break;
        case 0xA6: AND(atHL); break;
        case 0xA7: AND(A); break;
        case 0xA8: XOR(B); break;
        case 0xA9: XOR(C); break;
        case 0xAA: XOR(D); break;
        case 0xAB: XOR(E); break;
        case 0xAC: XOR(H); break;
        case 0xAD: XOR(L); break;
        case 0xAE: XOR(atHL); break;
        case 0xAF: XOR(A); break;

        case 0xB0: OR(B); break;
        case 0xB1: OR(C); break;
        case 0xB2: OR(D); break;
        case 0xB3: OR(E); break;
        case 0xB4: OR(H); break;
        case 0xB5: OR(L); break;
        case 0xB6: OR(atHL); break;
        case 0xB7: OR(A); break;
        case 0xB8: CP(B); break;
        case 0xB9: CP(C); break;
        case 0xBA: CP(D); break;
        case 0xBB: CP(E); break;
        case 0xBC: CP(H); break;
        case 0xBD: CP(L); break;
        case 0xBE: CP(atHL); break;
        case 0xBF: CP(A); break;

        case 0xC0: RETcond(!flagZ); break;
        case 0xC1: POP(B, C); break;
        case 0xC2: JPcond(D16, !flagZ); break;
        case 0xC3: JP(D16); break;
        case 0xC4: CALLcond(D16, !flagZ); break;
        case 0xC5: PUSH(B, C); break;
        case 0xC6: ADD(D8); break;
        case 0xC7: RST(0x00); break;
        case 0xC8: RETcond(flagZ); break;
        case 0xC9: RET(); break;
        case 0xCA: JPcond(D16, flagZ); break;
        case 0xCC: CALLcond(D16, flagZ); break;
        case 0xCD: CALL(D16); break;
        case 0xCE: ADC(D8); break;
        case 0xCF: RST(0x08); break;
        
        case 0xD0: RETcond(!flagC); break;
        case 0xD1: POP(D, E); break;
        case 0xD2: JPcond(D16, !flagC); break;
        case 0xD4: CALLcond(D16, !flagC); break; 
        case 0xD5: PUSH(D, E); break;
        case 0xD6: SUB(D8); break;
        case 0xD7: RST(0x10); break;
        case 0xD8: RETcond(flagC); break;
        case 0xD9: RETI(); break;
        case 0xDA: JPcond(D16, flagC); break;
        case 0xDC: CALLcond(D16, flagC); break;
        case 0xDE: SBC(D8); break;
        case 0xDF: RST(0x18);

        case 0xE0: LD(atLDH, A); break;
        case 0xE1: POP(H, L); break;
        case 0xE2: LD(atCIO, A); break;
        case 0xE5: PUSH(H, L); break;
        case 0xE6: AND(D8); break;
        case 0xE7: RST(0x20); break;
        case 0xE8: ADDsp(D8); break;
        case 0xE9: JP(HL); break;
        case 0xEA: LD(atD16, A); break;
        case 0xEE: XOR(D8); break;
        case 0xEF: RST(0x28); break;

        case 0xF0: LD(A, atLDH); break;
        case 0xF1: POPaf(); break;
        case 0xF2: LD(A, atCIO); break;
        case 0xF3: DI();
        case 0xF5: PUSHaf(); break;
        case 0xF6: OR(D8); break;
        case 0xF7: RST(0x30); break;
        case 0xF8: LDhl(SP + R8); break;
        case 0xF9: LDsp(HL); break;
        case 0xFA: LD(A, atD16); break;
        case 0xFB: EI(); break;
        case 0xFE: CP(D8); break;
        case 0xFF: RST(0x38); break;
        
        default: XXX(op); break;

    }
}

void CPU::execCB(u8 op) {
    u16 HL = Utils::getPair(H, L);
    u8 &atHL = mmu->getRef(HL);

    switch (op) {

        case 0x00: RL(B, true); break;
        case 0x01: RL(C, true); break;
        case 0x02: RL(D, true); break;
        case 0x03: RL(E, true); break;
        case 0x04: RL(H, true); break;
        case 0x05: RL(L, true); break;
        case 0x06: RL(atHL, true); break;
        case 0x07: RL(A, true); break;
        case 0x08: RR(B, true); break;
        case 0x09: RR(C, true); break;
        case 0x0A: RR(D, true); break;
        case 0x0B: RR(E, true); break;
        case 0x0C: RR(H, true); break;
        case 0x0D: RR(L, true); break;
        case 0x0E: RR(atHL, true); break;
        case 0x0F: RR(A, true); break;

        case 0x10: RL(B, false); break;
        case 0x11: RL(C, false); break;
        case 0x12: RL(D, false); break;
        case 0x13: RL(E, false); break;
        case 0x14: RL(H, false); break;
        case 0x15: RL(L, false); break;
        case 0x16: RL(atHL, false); break;
        case 0x17: RL(A, false); break;
        case 0x18: RR(B, false); break;
        case 0x19: RR(C, false); break;
        case 0x1A: RR(D, false); break;
        case 0x1B: RR(E, false); break;
        case 0x1C: RR(H, false); break;
        case 0x1D: RR(L, false); break;
        case 0x1E: RR(atHL, false); break;
        case 0x1F: RR(A, false); break;

        case 0x20: SLA(B); break;
        case 0x21: SLA(C); break;
        case 0x22: SLA(D); break;
        case 0x23: SLA(E); break;
        case 0x24: SLA(H); break;
        case 0x25: SLA(L); break;
        case 0x26: SLA(atHL); break;
        case 0x27: SLA(A); break;
        case 0x28: SRA(B); break;
        case 0x29: SRA(C); break;
        case 0x2A: SRA(D); break;
        case 0x2B: SRA(E); break;
        case 0x2C: SRA(H); break;
        case 0x2D: SRA(L); break;
        case 0x2E: SRA(atHL); break;
        case 0x2F: SRA(A); break;

        case 0x30: SWAP(B); break;
        case 0x31: SWAP(C); break;
        case 0x32: SWAP(D); break;
        case 0x33: SWAP(E); break;
        case 0x34: SWAP(H); break;
        case 0x35: SWAP(L); break;
        case 0x36: SWAP(atHL); break;
        case 0x37: SWAP(A); break;
        case 0x38: SRL(B); break;
        case 0x39: SRL(C); break;
        case 0x3A: SRL(D); break;
        case 0x3B: SRL(E); break;
        case 0x3C: SRL(H); break;
        case 0x3D: SRL(L); break;
        case 0x3E: SRL(atHL); break;
        case 0x3F: SRL(A); break;

        case 0x40: BIT(0, B); break;
        case 0x41: BIT(0, C); break;
        case 0x42: BIT(0, D); break;
        case 0x43: BIT(0, E); break;
        case 0x44: BIT(0, H); break;
        case 0x45: BIT(0, L); break;
        case 0x46: BIT(0, atHL); break;
        case 0x47: BIT(0, A); break;
        case 0x48: BIT(1, B); break;
        case 0x49: BIT(1, C); break;
        case 0x4A: BIT(1, D); break;
        case 0x4B: BIT(1, E); break;
        case 0x4C: BIT(1, H); break;
        case 0x4D: BIT(1, L); break;
        case 0x4E: BIT(1, atHL); break;
        case 0x4F: BIT(1, A); break;

        case 0x50: BIT(2, B); break;
        case 0x51: BIT(2, C); break;
        case 0x52: BIT(2, D); break;
        case 0x53: BIT(2, E); break;
        case 0x54: BIT(2, H); break;
        case 0x55: BIT(2, L); break;
        case 0x56: BIT(2, atHL); break;
        case 0x57: BIT(2, A); break;
        case 0x58: BIT(3, B); break;
        case 0x59: BIT(3, C); break;
        case 0x5A: BIT(3, D); break;
        case 0x5B: BIT(3, E); break;
        case 0x5C: BIT(3, H); break;
        case 0x5D: BIT(3, L); break;
        case 0x5E: BIT(3, atHL); break;
        case 0x5F: BIT(3, A); break;

        case 0x60: BIT(4, B); break;
        case 0x61: BIT(4, C); break;
        case 0x62: BIT(4, D); break;
        case 0x63: BIT(4, E); break;
        case 0x64: BIT(4, H); break;
        case 0x65: BIT(4, L); break;
        case 0x66: BIT(4, atHL); break;
        case 0x67: BIT(4, A); break;
        case 0x68: BIT(5, B); break;
        case 0x69: BIT(5, C); break;
        case 0x6A: BIT(5, D); break;
        case 0x6B: BIT(5, E); break;
        case 0x6C: BIT(5, H); break;
        case 0x6D: BIT(5, L); break;
        case 0x6E: BIT(5, atHL); break;
        case 0x6F: BIT(5, A); break;

        case 0x70: BIT(6, B); break;
        case 0x71: BIT(6, C); break;
        case 0x72: BIT(6, D); break;
        case 0x73: BIT(6, E); break;
        case 0x74: BIT(6, H); break;
        case 0x75: BIT(6, L); break;
        case 0x76: BIT(6, atHL); break;
        case 0x77: BIT(6, A); break;
        case 0x78: BIT(7, B); break;
        case 0x79: BIT(7, C); break;
        case 0x7A: BIT(7, D); break;
        case 0x7B: BIT(7, E); break;
        case 0x7C: BIT(7, H); break;
        case 0x7D: BIT(7, L); break;
        case 0x7E: BIT(7, atHL); break;
        case 0x7F: BIT(7, A); break;
        
        case 0x80: RES(0, B); break;
        case 0x81: RES(0, C); break;
        case 0x82: RES(0, D); break;
        case 0x83: RES(0, E); break;
        case 0x84: RES(0, H); break;
        case 0x85: RES(0, L); break;
        case 0x86: RES(0, atHL); break;
        case 0x87: RES(0, A); break;
        case 0x88: RES(1, B); break;
        case 0x89: RES(1, C); break;
        case 0x8A: RES(1, D); break;
        case 0x8B: RES(1, E); break;
        case 0x8C: RES(1, H); break;
        case 0x8D: RES(1, L); break;
        case 0x8E: RES(1, atHL); break;
        case 0x8F: RES(1, A); break;

        case 0x90: RES(2, B); break;
        case 0x91: RES(2, C); break;
        case 0x92: RES(2, D); break;
        case 0x93: RES(2, E); break;
        case 0x94: RES(2, H); break;
        case 0x95: RES(2, L); break;
        case 0x96: RES(2, atHL); break;
        case 0x97: RES(2, A); break;
        case 0x98: RES(3, B); break;
        case 0x99: RES(3, C); break;
        case 0x9A: RES(3, D); break;
        case 0x9B: RES(3, E); break;
        case 0x9C: RES(3, H); break;
        case 0x9D: RES(3, L); break;
        case 0x9E: RES(3, atHL); break;
        case 0x9F: RES(3, A); break;

        case 0xA0: RES(4, B); break;
        case 0xA1: RES(4, C); break;
        case 0xA2: RES(4, D); break;
        case 0xA3: RES(4, E); break;
        case 0xA4: RES(4, H); break;
        case 0xA5: RES(4, L); break;
        case 0xA6: RES(4, atHL); break;
        case 0xA7: RES(4, A); break;
        case 0xA8: RES(5, B); break;
        case 0xA9: RES(5, C); break;
        case 0xAA: RES(5, D); break;
        case 0xAB: RES(5, E); break;
        case 0xAC: RES(5, H); break;
        case 0xAD: RES(5, L); break;
        case 0xAE: RES(5, atHL); break;
        case 0xAF: RES(5, A); break;

        case 0xB0: RES(6, B); break;
        case 0xB1: RES(6, C); break;
        case 0xB2: RES(6, D); break;
        case 0xB3: RES(6, E); break;
        case 0xB4: RES(6, H); break;
        case 0xB5: RES(6, L); break;
        case 0xB6: RES(6, atHL); break;
        case 0xB7: RES(6, A); break;
        case 0xB8: RES(7, B); break;
        case 0xB9: RES(7, C); break;
        case 0xBA: RES(7, D); break;
        case 0xBB: RES(7, E); break;
        case 0xBC: RES(7, H); break;
        case 0xBD: RES(7, L); break;
        case 0xBE: RES(7, atHL); break;
        case 0xBF: RES(7, A); break;

        case 0xC0: SET(0, B); break;
        case 0xC1: SET(0, C); break;
        case 0xC2: SET(0, D); break;
        case 0xC3: SET(0, E); break;
        case 0xC4: SET(0, H); break;
        case 0xC5: SET(0, L); break;
        case 0xC6: SET(0, atHL); break;
        case 0xC7: SET(0, A); break;
        case 0xC8: SET(1, B); break;
        case 0xC9: SET(1, C); break;
        case 0xCA: SET(1, D); break;
        case 0xCB: SET(1, E); break;
        case 0xCC: SET(1, H); break;
        case 0xCD: SET(1, L); break;
        case 0xCE: SET(1, atHL); break;
        case 0xCF: SET(1, A); break;

        case 0xD0: SET(2, B); break;
        case 0xD1: SET(2, C); break;
        case 0xD2: SET(2, D); break;
        case 0xD3: SET(2, E); break;
        case 0xD4: SET(2, H); break;
        case 0xD5: SET(2, L); break;
        case 0xD6: SET(2, atHL); break;
        case 0xD7: SET(2, A); break;
        case 0xD8: SET(3, B); break;
        case 0xD9: SET(3, C); break;
        case 0xDA: SET(3, D); break;
        case 0xDB: SET(3, E); break;
        case 0xDC: SET(3, H); break;
        case 0xDD: SET(3, L); break;
        case 0xDE: SET(3, atHL); break;
        case 0xDF: SET(3, A); break;

        case 0xE0: SET(4, B); break;
        case 0xE1: SET(4, C); break;
        case 0xE2: SET(4, D); break;
        case 0xE3: SET(4, E); break;
        case 0xE4: SET(4, H); break;
        case 0xE5: SET(4, L); break;
        case 0xE6: SET(4, atHL); break;
        case 0xE7: SET(4, A); break;
        case 0xE8: SET(5, B); break;
        case 0xE9: SET(5, C); break;
        case 0xEA: SET(5, D); break;
        case 0xEB: SET(5, E); break;
        case 0xEC: SET(5, H); break;
        case 0xED: SET(5, L); break;
        case 0xEE: SET(5, atHL); break;
        case 0xEF: SET(5, A); break;

        case 0xF0: SET(6, B); break;
        case 0xF1: SET(6, C); break;
        case 0xF2: SET(6, D); break;
        case 0xF3: SET(6, E); break;
        case 0xF4: SET(6, H); break;
        case 0xF5: SET(6, L); break;
        case 0xF6: SET(6, atHL); break;
        case 0xF7: SET(6, A); break;
        case 0xF8: SET(7, B); break;
        case 0xF9: SET(7, C); break;
        case 0xFA: SET(7, D); break;
        case 0xFB: SET(7, E); break;
        case 0xFC: SET(7, H); break;
        case 0xFD: SET(7, L); break;
        case 0xFE: SET(7, atHL); break;
        case 0xFF: SET(7, A); break;

        default: XXX(op); break;

    }
}
